// Mocks generated by Mockito 5.4.4 from annotations
// in user_identification/test/data/datasources/local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:core/core.dart' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i3.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i3.Failure, bool>> saveString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i3.Failure, bool>>.value(
            _FakeEither_0<_i3.Failure, bool>(
          this,
          Invocation.method(
            #saveString,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i3.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i3.Failure, String?>> getString(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValue: _i4.Future<_i2.Either<_i3.Failure, String?>>.value(
            _FakeEither_0<_i3.Failure, String?>(
          this,
          Invocation.method(
            #getString,
            [key],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i3.Failure, String?>>);
}
