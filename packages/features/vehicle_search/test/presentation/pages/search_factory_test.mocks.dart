// Mocks generated by Mockito 5.4.4 from annotations
// in vehicle_selection/test/presentation/pages/search_factory_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_bloc/flutter_bloc.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vehicle_selection/vehicle_search.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSearchVehicleByVin_0 extends _i1.SmartFake
    implements _i2.SearchVehicleByVin {
  _FakeSearchVehicleByVin_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSelectVehicleOption_1 extends _i1.SmartFake
    implements _i2.SelectVehicleOption {
  _FakeSelectVehicleOption_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchState_2 extends _i1.SmartFake implements _i2.SearchState {
  _FakeSearchState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchCubit extends _i1.Mock implements _i2.SearchCubit {
  MockSearchCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SearchVehicleByVin get searchVehicleByVin => (super.noSuchMethod(
        Invocation.getter(#searchVehicleByVin),
        returnValue: _FakeSearchVehicleByVin_0(
          this,
          Invocation.getter(#searchVehicleByVin),
        ),
      ) as _i2.SearchVehicleByVin);

  @override
  _i2.SelectVehicleOption get selectVehicleOption => (super.noSuchMethod(
        Invocation.getter(#selectVehicleOption),
        returnValue: _FakeSelectVehicleOption_1(
          this,
          Invocation.getter(#selectVehicleOption),
        ),
      ) as _i2.SelectVehicleOption);

  @override
  _i2.SearchState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSearchState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.SearchState);

  @override
  _i3.Stream<_i2.SearchState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.SearchState>.empty(),
      ) as _i3.Stream<_i2.SearchState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> submitVin(String? vin) => (super.noSuchMethod(
        Invocation.method(
          #submitVin,
          [vin],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> selectVehicle(String? externalId) => (super.noSuchMethod(
        Invocation.method(
          #selectVehicle,
          [externalId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<dynamic> retry() => (super.noSuchMethod(
        Invocation.method(
          #retry,
          [],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  void emit(_i2.SearchState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i4.Change<_i2.SearchState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
